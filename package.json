{
  "name": "hello-fargate",
  "version": "3.0.0",
  "description": "hobby experiment playing with fargate",
  "main": "dist/server.js",
  "scripts": {
    "start": "npm run docker-build && docker run --name $npm_package_name --rm -P $npm_package_name",
    "stop": "docker stop $npm_package_name",
    "lint": "eslint",
    "build": "tsc --build --verbose",
    "test": "jest --coverage --verbose",
    "clean": "rm -rfv dist/",
    "deploy": "npm run docker-build && npm run docker-push",
    "docker-build": ". ./.env && docker build . -t $npm_package_name:$npm_package_version -t $npm_package_name:latest -t $ECR/$npm_package_name:$npm_package_version -t $ECR/$npm_package_name:latest",
    "docker-push": ". ./.env && docker push $ECR/$npm_package_name:$npm_package_version",
    "get-common": "npm run get-ambassador-crds && npm run get-ambassador-rbac && npm run get-metrics-server",
    "get-ambassador-crds": "curl -sL https://www.getambassador.io/yaml/ambassador/ambassador-crds.yaml > k8s/common/ambassador-crds.yml",
    "get-ambassador-rbac": "curl -sL https://www.getambassador.io/yaml/ambassador/ambassador-rbac.yaml > k8s/common/ambassador-rbac.yml",
    "get-metrics-server": "curl -sL https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml > k8s/common/components.yml",

    "dkr": "echo \"===============DOCKER SCRIPTS ===============\"",
    "dkr-start": "npm run docker-build && docker run --name $npm_package_name -d --rm -p 3000:80 $npm_package_name",
    "dkr-test": "API_HOST=localhost API_PORT=3000 jest --verbose -i test/api.spec.ts",
    "dkr-stop": "docker stop $npm_package_name",

    "k8s": "echo \"===============KUBERNETES SCRIPTS===============\"",
    "k8s-deploy": "npm run docker-build",
    "k8s-start-common": "kubectl --context='docker-desktop' apply -f k8s/common/ && kubectl --context='docker-desktop' wait --for=condition=ready pods -l service=ambassador --timeout=90s",
    "k8s-start-local": "kubectl --context='docker-desktop' apply -f k8s/local/ && kubectl --context='docker-desktop' wait --for=condition=ready pods -l app=myapi --timeout=90s",
    "k8s-start": "npm run k8s-start-common && npm run k8s-start-local",
    "k8s-test": "env API_HOST=myapi-service telepresence --context docker-desktop --run jest --verbose -i test/api.spec.ts",
    "k8s-stop": "npm run k8s-stop-local && npm run k8s-stop-common",
    "k8s-stop-local": "kubectl --context='docker-desktop' delete -f k8s/local/ --wait",
    "k8s-stop-common": "kubectl --context='docker-desktop' delete -f k8s/common/ --wait && kubectl --context='docker-desktop' wait --for=delete pods -l service=ambassador --timeout=120s",
    
    "eks": "echo \"===============EKS SCRIPTS===============\"",
    "eks-start-cluster": "eksctl create cluster -f eks/cluster-managed.yml",
    "eks-deploy": "npm run deploy",
    "eks-start-common": "kubectl apply -f k8s/common/ && kubectl wait --for=condition=ready pods -l service=ambassador --timeout=90s",
    "eks-start-cloud": "kubectl apply -f k8s/cloud/ && kubectl wait --for=condition=ready pods -l app=myapi --timeout=90s",
    "eks-start": "npm run eks-start-cluster && npm run eks-start-common && npm run eks-start-cloud",
    "eks-test": "env API_HOST=$(kubectl get svc ambassador -o \"go-template={{range .status.loadBalancer.ingress}}{{or .ip .hostname}}{{end}}\") jest --verbose -i test/api.spec.ts",
    "eks-stop-cloud": "kubectl delete -f k8s/cloud/ --wait",
    "eks-stop-common": "kubectl delete -f k8s/common/ && kubectl wait --for=delete pods -l service=ambassador --timeout=120s",
    "eks-stop-cluster": "eksctl delete cluster -f eks/cluster-managed.yml --wait",
    "eks-stop": "npm run eks-stop-cloud && npm run eks-stop-common && npm run eks-stop-cluster",
    "ci": "echo \"===============CONTINUOUS INTEGRATION SCRIPTS===============\"",
    "ci-app": "npm run clean && npm run lint && npm run build && npm run test",
    "ci-dkr": "npm run dkr-start && npm run dkr-test; npm run dkr-stop",
    "ci-k8s": "npm run k8s-start && npm run k8s-test; npm run k8s-stop",
    "ci-eks": "npm run eks-start && npm run eks-test; npm run eks-stop"
  },
  "jest": {
    "verbose": true,
    "testEnvironment": "node",
    "testTimeout": 120000,
    "globals": {
      "ts-jest": {
        "tsconfig": "./test/tsconfig.json"
      }
    },
    "displayName": "integration",
    "preset": "ts-jest",
    "testMatch": [
      "<rootDir>/test/**/*.spec.ts",
      "<rootDir>/src/**/*.spec.ts"
    ],
    "coverageThreshold": {
      "global": {
        "lines": 75,
        "statements": 75,
        "functions": 75,
        "branches": 66
      }
    },
    "collectCoverageFrom": [
      "src/**/*.ts",
      "!src/**/*.d.ts",
      "!src/**/*.spec.ts"
    ],
    "coveragePathIgnorePatterns": [
      "src/server.ts",
      "src/scripts"
    ]
  },
  "author": "Josh Peak <neozenith.dev@gmail.com>",
  "license": "MIT",
  "devDependencies": {
    "@types/express": "^4.17.8",
    "@types/jest": "^26.0.15",
    "@types/log4js": "^2.3.5",
    "@types/mongoose": "^5.7.36",
    "@types/node": "^14.14.5",
    "@types/shelljs": "^0.8.8",
    "@types/supertest": "^2.0.10",
    "@types/throng": "^4.0.2",
    "@typescript-eslint/eslint-plugin": "^4.6.0",
    "@typescript-eslint/parser": "^4.6.0",
    "eslint": "^7.12.0",
    "eslint-config-prettier": "^6.14.0",
    "eslint-config-standard": "^15.0.0",
    "eslint-plugin-import": "^2.22.1",
    "eslint-plugin-node": "^11.1.0",
    "eslint-plugin-prettier": "^3.1.4",
    "eslint-plugin-promise": "^4.2.1",
    "eslint-plugin-standard": "^4.0.2",
    "jest": "^26.6.1",
    "prettier": "^2.1.2",
    "shelljs": "^0.8.4",
    "supertest": "^6.0.0",
    "ts-jest": "^26.4.3",
    "ts-node": "^9.0.0",
    "typescript": "^4.0.5"
  },
  "dependencies": {
    "express": "^4.17.1",
    "log4js": "^6.3.0",
    "mongoose": "^5.10.11",
    "source-map-support": "^0.5.19",
    "throng": "^5.0.0"
  }
}
